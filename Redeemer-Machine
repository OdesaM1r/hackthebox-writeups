This document will be going over how I cracked the Redeemer Machine on the HTB Starting Point path.

For this machine, I will refrain from using any walkthrough at all and rely mostly on hints given by the HTB question fields.

I first ran nmap (target IP) in order to find the open ports, but I ran into an issue. It appears that ALL 1000 ports that nmap scans by default are closed.

No worries, I'll broaden my scan to 2000 ports using the nmap -p 1-2000 (target IP) and see if I can find something.

I then scanned ports 2000-3000
No luck
Then i scanned 3000-4000
No luck
Then i scanned 4000-5000

I kept scanning ports like this until I found an open one, which was Port 6379 with the Redis service.

PORT     STATE SERVICE
6379/tcp open  redis

Redis, after doing some research, is an in-memory database. According to wikipedia;

Redis (/ˈrɛdɪs/;[8][9] Remote Dictionary Server)[8] is an in-memory key–value database, used as a distributed cache and message broker, with optional durability.[10] 
Because it holds all data in memory and because of its design, Redis offers low-latency reads and writes, 
making it particularly suitable for use cases that require a cache. Redis is the most popular NoSQL database,[11][12][13] and one of the most popular databases overall.[14] 

After some googling, the command line utility for Redis is redis-cli. To use this command, I will need to install redis.

Running the sudo apt install redis command, I should get it and be able to move on with this machine.

Uh oh.

"Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?"

Well. This isn't good. Time to troubleshoot.

I ran the sudo apt-get update command to make sure my distro was working fine and all of my dependencies were up to date. 

Get:1 https://deb.parrot.sh/parrot lory InRelease [29.8 kB]
Get:2 https://deb.parrot.sh/direct/parrot lory-security InRelease [29.5 kB]
Get:3 https://deb.parrot.sh/parrot lory-backports InRelease [29.7 kB]
Get:4 https://deb.parrot.sh/parrot lory/contrib Sources [76.8 kB]
Get:5 https://deb.parrot.sh/parrot lory/main Sources [15.6 MB]
Get:6 https://deb.parrot.sh/parrot lory/non-free Sources [127 kB]
Get:7 https://deb.parrot.sh/parrot lory/main amd64 Packages [19.2 MB]
Get:8 https://deb.parrot.sh/parrot lory/contrib amd64 Packages [121 kB]        
Get:9 https://deb.parrot.sh/parrot lory/non-free amd64 Packages [230 kB]       
Get:10 https://deb.parrot.sh/parrot lory/non-free-firmware amd64 Packages [12.9 kB]
Get:11 https://deb.parrot.sh/direct/parrot lory-security/main amd64 Packages [538 kB]
Get:12 https://deb.parrot.sh/direct/parrot lory-security/contrib amd64 Packages [1,213 B]
Get:13 https://deb.parrot.sh/direct/parrot lory-security/non-free-firmware amd64 Packages [899 B]
Get:14 https://deb.parrot.sh/parrot lory-backports/main amd64 Packages [728 kB]
Get:15 https://deb.parrot.sh/parrot lory-backports/contrib amd64 Packages [11.9 kB]
Get:16 https://deb.parrot.sh/parrot lory-backports/non-free amd64 Packages [24.2 kB]
Get:17 https://deb.parrot.sh/parrot lory-backports/non-free-firmware amd64 Packages [6,279 B]
Fetched 36.8 MB in 11s (3,248 kB/s)                                            
Reading package lists... Done
W: Target Packages (main/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (main/binary-all/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (main/i18n/Translation-en_US) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (main/i18n/Translation-en) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (contrib/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (contrib/binary-all/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (contrib/i18n/Translation-en_US) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (contrib/i18n/Translation-en) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (non-free/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (non-free/binary-all/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (non-free/i18n/Translation-en_US) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (non-free/i18n/Translation-en) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (main/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (main/binary-all/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (main/i18n/Translation-en_US) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (main/i18n/Translation-en) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (contrib/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (contrib/binary-all/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (contrib/i18n/Translation-en_US) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (contrib/i18n/Translation-en) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (non-free/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Packages (non-free/binary-all/Packages) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (non-free/i18n/Translation-en_US) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19
W: Target Translations (non-free/i18n/Translation-en) is configured multiple times in /etc/apt/sources.list:1 and /etc/apt/sources.list.d/parrot.list:19


Well, it looks like the command did something. Let's try that redis command again.

sudo apt install redis-tools
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following additional packages will be installed:
  liblzf1
Suggested packages:
  ruby-redis
The following NEW packages will be installed:
  liblzf1 redis-tools
0 upgraded, 2 newly installed, 0 to remove and 364 not upgraded.
Need to get 988 kB/999 kB of archives.
After this operation, 6,016 kB of additional disk space will be used.
Do you want to continue? [Y/n] y
Get:1 https://deb.parrot.sh/parrot lory/main amd64 redis-tools amd64 5:7.0.15-1~deb12u4 [988 kB]
Fetched 988 kB in 2s (624 kB/s)  
Selecting previously unselected package liblzf1:amd64.
(Reading database ... 541935 files and directories currently installed.)
Preparing to unpack .../liblzf1_3.6-3_amd64.deb ...
Unpacking liblzf1:amd64 (3.6-3) ...
Selecting previously unselected package redis-tools.
Preparing to unpack .../redis-tools_5%3a7.0.15-1~deb12u4_amd64.deb ...
Unpacking redis-tools (5:7.0.15-1~deb12u4) ...
Setting up liblzf1:amd64 (3.6-3) ...
Setting up redis-tools (5:7.0.15-1~deb12u4) ...
Processing triggers for man-db (2.11.2-2) ...
Processing triggers for libc-bin (2.36-9+deb12u9) ...
Scanning application launchers
Removing duplicate launchers or broken launchers
 [-] Missing executable file kcmshell5 at launcher /usr/share/applications/kcm_trash.desktop
Launchers are updated

And it looks like everything works, success! Now, let's do some research on redis to figure out where to go next. Let's enter the redis-cli --help command.

redis-cli --help
redis-cli 7.0.15

Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]
  -h <hostname>      Server hostname (default: 127.0.0.1).
  -p <port>          Server port (default: 6379).
  -s <socket>        Server socket (overrides hostname and port).
  -a <password>      Password to use when connecting to the server.
                     You can also use the REDISCLI_AUTH environment
                     variable to pass this password more safely
                     (if both are used, this argument takes precedence).
  --user <username>  Used to send ACL style 'AUTH username pass'. Needs -a.
  --pass <password>  Alias of -a for consistency with the new --user option.
  --askpass          Force user to input password with mask from STDIN.
                     If this argument is used, '-a' and REDISCLI_AUTH
                     environment variable will be ignored.
  -u <uri>           Server URI.
  -r <repeat>        Execute specified command N times.
  -i <interval>      When -r is used, waits <interval> seconds per command.
                     It is possible to specify sub-second times like -i 0.1.
                     This interval is also used in --scan and --stat per cycle.
                     and in --bigkeys, --memkeys, and --hotkeys per 100 cycles.
  -n <db>            Database number.
  -2                 Start session in RESP2 protocol mode.
  -3                 Start session in RESP3 protocol mode.
  -x                 Read last argument from STDIN (see example below).
  -X                 Read <tag> argument from STDIN (see example below).
  -d <delimiter>     Delimiter between response bulks for raw formatting (default: \n).
  -D <delimiter>     Delimiter between responses for raw formatting (default: \n).
  -c                 Enable cluster mode (follow -ASK and -MOVED redirections).
  -e                 Return exit error code when command execution fails.
  --tls              Establish a secure TLS connection.
  --sni <host>       Server name indication for TLS.
  --cacert <file>    CA Certificate file to verify with.
  --cacertdir <dir>  Directory where trusted CA certificates are stored.
                     If neither cacert nor cacertdir are specified, the default
                     system-wide trusted root certs configuration will apply.
  --insecure         Allow insecure TLS connection by skipping cert validation.
  --cert <file>      Client certificate to authenticate with.
  --key <file>       Private key file to authenticate with.
  --tls-ciphers <list> Sets the list of preferred ciphers (TLSv1.2 and below)
                     in order of preference from highest to lowest separated by colon (":").
                     See the ciphers(1ssl) manpage for more information about the syntax of this string.
  --tls-ciphersuites <list> Sets the list of preferred ciphersuites (TLSv1.3)
                     in order of preference from highest to lowest separated by colon (":").
                     See the ciphers(1ssl) manpage for more information about the syntax of this string,
                     and specifically for TLSv1.3 ciphersuites.
  --raw              Use raw formatting for replies (default when STDOUT is
                     not a tty).
  --no-raw           Force formatted output even when STDOUT is not a tty.
  --quoted-input     Force input to be handled as quoted strings.
  --csv              Output in CSV format.
  --json             Output in JSON format (default RESP3, use -2 if you want to use with RESP2).
  --quoted-json      Same as --json, but produce ASCII-safe quoted strings, not Unicode.
  --show-pushes <yn> Whether to print RESP3 PUSH messages.  Enabled by default when
                     STDOUT is a tty but can be overridden with --show-pushes no.
  --stat             Print rolling stats about server: mem, clients, ...
  --latency          Enter a special mode continuously sampling latency.
                     If you use this mode in an interactive session it runs
                     forever displaying real-time stats. Otherwise if --raw or
                     --csv is specified, or if you redirect the output to a non
                     TTY, it samples the latency for 1 second (you can use
                     -i to change the interval), then produces a single output
                     and exits.
  --latency-history  Like --latency but tracking latency changes over time.
                     Default time interval is 15 sec. Change it using -i.
  --latency-dist     Shows latency as a spectrum, requires xterm 256 colors.
                     Default time interval is 1 sec. Change it using -i.
  --lru-test <keys>  Simulate a cache workload with an 80-20 distribution.
  --replica          Simulate a replica showing commands received from the master.
  --rdb <filename>   Transfer an RDB dump from remote server to local file.
                     Use filename of "-" to write to stdout.
 --functions-rdb <filename> Like --rdb but only get the functions (not the keys)
                     when getting the RDB dump file.
  --pipe             Transfer raw Redis protocol from stdin to server.
  --pipe-timeout <n> In --pipe mode, abort with error if after sending all data.
                     no reply is received within <n> seconds.
                     Default timeout: 30. Use 0 to wait forever.
  --bigkeys          Sample Redis keys looking for keys with many elements (complexity).
  --memkeys          Sample Redis keys looking for keys consuming a lot of memory.
  --memkeys-samples <n> Sample Redis keys looking for keys consuming a lot of memory.
                     And define number of key elements to sample
  --hotkeys          Sample Redis keys looking for hot keys.
                     only works when maxmemory-policy is *lfu.
  --scan             List all keys using the SCAN command.
  --pattern <pat>    Keys pattern when using the --scan, --bigkeys or --hotkeys
                     options (default: *).
  --quoted-pattern <pat> Same as --pattern, but the specified string can be
                         quoted, in order to pass an otherwise non binary-safe string.
  --intrinsic-latency <sec> Run a test to measure intrinsic system latency.
                     The test will run for the specified amount of seconds.
  --eval <file>      Send an EVAL command using the Lua script at <file>.
  --ldb              Used with --eval enable the Redis Lua debugger.
  --ldb-sync-mode    Like --ldb but uses the synchronous Lua debugger, in
                     this mode the server is blocked and script changes are
                     not rolled back from the server memory.
  --cluster <command> [args...] [opts...]
                     Cluster Manager command and arguments (see below).
  --verbose          Verbose mode.
  --no-auth-warning  Don't show warning message when using password on command
                     line interface.
  --help             Output this help and exit.
  --version          Output version and exit.

Cluster Manager Commands:
  Use --cluster help to list all available cluster manager commands.

Examples:
  cat /etc/passwd | redis-cli -x set mypasswd
  redis-cli -D "" --raw dump key > key.dump && redis-cli -X dump_tag restore key2 0 dump_tag replace < key.dump
  redis-cli -r 100 lpush mylist x
  redis-cli -r 100 -i 1 info | grep used_memory_human:
  redis-cli --quoted-input set '"null-\x00-separated"' value
  redis-cli --eval myscript.lua key1 key2 , arg1 arg2 arg3
  redis-cli --scan --pattern '*:12345*'

  (Note: when using --eval the comma separates KEYS[] from ARGV[] items)

When no command is given, redis-cli starts in interactive mode.
Type "help" in interactive mode for information on available commands
and settings.



Alright. Let's use what we have here. I have the port (6379) and the ip. This means that I have the -h and -p commands to use in order to gain access to this machine.

So, let's start with redis-cli -h (IP)

redis-cli -h 10.129.204.172
10.129.204.172:6379>

Well, it looks like I gained access.

Now that I'm in, I need to find a command to do some reconnaisance of my surroundings. Through the use of google, I found typing "info" while connected to the server gives you information (shocker).

Let's do just that.

# Server
redis_version:5.0.7
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:66bd629f924ac924
redis_mode:standalone
os:Linux 5.4.0-77-generic x86_64
arch_bits:64
multiplexing_api:epoll
atomicvar_api:atomic-builtin
gcc_version:9.3.0
process_id:752
run_id:f74adc997db8a535dc7cf949ea68ad58a9593578
tcp_port:6379
uptime_in_seconds:2983
uptime_in_days:0
hz:10
configured_hz:10
lru_clock:4693525
executable:/usr/bin/redis-server
config_file:/etc/redis/redis.conf

# Clients
connected_clients:1
client_recent_max_input_buffer:2
client_recent_max_output_buffer:0
blocked_clients:0

# Memory
used_memory:859624
used_memory_human:839.48K
used_memory_rss:5824512
used_memory_rss_human:5.55M
used_memory_peak:859624
used_memory_peak_human:839.48K
used_memory_peak_perc:100.12%
used_memory_overhead:846142
used_memory_startup:796224
used_memory_dataset:13482
used_memory_dataset_perc:21.26%
allocator_allocated:1521080
allocator_active:1880064
allocator_resident:9101312
total_system_memory:2084024320
total_system_memory_human:1.94G
used_memory_lua:41984
used_memory_lua_human:41.00K
used_memory_scripts:0
used_memory_scripts_human:0B
number_of_cached_scripts:0
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
allocator_frag_ratio:1.24
allocator_frag_bytes:358984
allocator_rss_ratio:4.84
allocator_rss_bytes:7221248
rss_overhead_ratio:0.64
rss_overhead_bytes:-3276800
mem_fragmentation_ratio:7.12
mem_fragmentation_bytes:5006888
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_clients_slaves:0
mem_clients_normal:49694
mem_aof_buffer:0
mem_allocator:jemalloc-5.2.1
active_defrag_running:0
lazyfree_pending_objects:0

# Persistence
loading:0
rdb_changes_since_last_save:0
rdb_bgsave_in_progress:0
rdb_last_save_time:1749521907
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:0
rdb_current_bgsave_time_sec:-1
rdb_last_cow_size:417792
aof_enabled:0
aof_rewrite_in_progress:0
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:-1
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_last_write_status:ok
aof_last_cow_size:0

# Stats
total_connections_received:6
total_commands_processed:6
instantaneous_ops_per_sec:0
total_net_input_bytes:367
total_net_output_bytes:11715
instantaneous_input_kbps:0.00
instantaneous_output_kbps:0.00
rejected_connections:0
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:0
expired_stale_perc:0.00
expired_time_cap_reached_count:0
evicted_keys:0
keyspace_hits:0
keyspace_misses:0
pubsub_channels:0
pubsub_patterns:0
latest_fork_usec:354
migrate_cached_sockets:0
slave_expires_tracked_keys:0
active_defrag_hits:0
active_defrag_misses:0
active_defrag_key_hits:0
active_defrag_key_misses:0

# Replication
role:master
connected_slaves:0
master_replid:36efb15671b3b8d79f2c07e660f3f69308e14cb7
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:0
second_repl_offset:-1
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0

# CPU
used_cpu_sys:3.424992
used_cpu_user:3.030756
used_cpu_sys_children:0.000000
used_cpu_user_children:0.001468

# Cluster
cluster_enabled:0

# Keyspace
db0:keys=4,expires=0,avg_ttl=0


Alright. Now that we have all of this garble, it's apparent that this Redis server is running version 5.0.7 giving us a nice answer to task 7.

Let's pay attention to the Keyspace section. It looks like it contains 4 keys and is running under "database 0". Let's try it out.

After doing some research, it appears that I have to use the select command. Let's try select 0 and poke at the db.

10.129.204.172:6379> select 0
OK

Awesome. Looks like the database is working.

Now the keys. After searching it up, it looks like it would be useful to list the 4 keys using the keys * command.

10.129.204.172:6379> keys *
1) "flag"
2) "temp"
3) "numb"
4) "stor"

I now have 4 keys. If you have a keen eye, you'd notice that key 1 has the name "flag". I wonder if that's a clue? Let's take a look using the get command.

10.129.204.172:6379> get flag
"03e1d2b376c37ab3f5319922053953eb"

After using the get command, the CLI spit out a suspiciously flag-shaped string of characters. Let's see if i can submit it.

And success! The machine has been defeated. All without the use of a walkthrough. 
